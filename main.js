/**
 * 백준 온라인 저지 Node js 템플릿
 *
 * Input
 * : 인풋의 경우 fs 모듈을 사용하거나 readLine 모듈을 사용해 해결한다.
 *
 * Output
 * : 아웃풋의 경우 해당 결과를 출력하기만 하면 된다.
 *
 */

// 1. fs 모듈을 사용할 때,
// input의 조건에 따라서 split을 어떻게 할 지가 나뉘어진다.
// fs 모듈의 경우 오류가 발생해 실패가 나는 경우도 있다고 함
const input = require("fs").readFileSync("/dev/stdin").toString().trim();

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// 2. readLine 이용
// readLine 모듈을 사용할 경우 fs 모듈 보다 속도가 느려
// 실패하는 경우가 발생할 수도 있다고 함

const readline = require("readline");

// 노드를 통해서 stdIn, stdOut을 처리할 수 있는 객체를 생성
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// 이 객체에 on 메소드를 통해서 line 이벤트가 발생하면 처리할 이벤트 핸들러 함수를 할당
rl.on("line", (line) => {
  const input = "여기에 인풋을 처리해서 인풋 값으로 만들어 주어 사용한다.";
  const result =
    "여기에 실제로 알고리즘을 처리할 함수를 작성해 결과를 뽑아낸다.";
  console.log(result); // 결과 출력

  rl.close();
  // 이벤트 객체를 종료
}).on("close", () => {
  // 이벤트 객체가 종료될 때
  // 노드도 종료시킨다.
  process.exit();
});

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/**
 * 스트링 인풋을 데이터 값으로 처리할 수 있게 끔
 * 가공 시키는 방법
 */

// 1. 한 줄일 때는 trim을 통해서 필요 없는 공백만 지운뒤 그냥 사용한다.
const oneLine = "apple".trim();

// 2. 한 줄이면서 여러 값으로 되어있는 input을 밭을경우 split(공백 혹은 쉼표)을 통해 구분해준다.
const multiInput = "a b c d".trim().split(" ");

// 2. 여러 줄로 되어있는 input을 밭을경우 split(개행문자)을 통해 구분해준다.
const multiLine = `
8
abcd
390
20134`
  .trim()
  .split("\n");
